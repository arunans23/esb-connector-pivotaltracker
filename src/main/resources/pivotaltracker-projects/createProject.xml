<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!-- Method Documentation URL: http://www.pivotaltracker.com/help/api/rest/v5#projects_post -->
<template name="createProject" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="name" description="The name of the project." />
   <parameter name="hasNoOwner"
      description="By default, the user whose credentials are supplied will be added as a project owner. To leave the project without this owner, supply the no_owner key." />
   <parameter name="newAccountName" description="Creates a new account with the specified name, and adds the new project to that account." />
   <parameter name="isCreateSample" description="Autogenerates a sample project that will allow you to get used to using Tracker." />
   <parameter name="iterationLength" description="The number of weeks in an iteration." />
   <parameter name="weekStartDay"
      description="The day in the week the project's iterations are to start on.Valid enumeration values: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday." />
   <parameter name="pointScale"
      description="The specification for the 'point scale' available for entering story estimates within the project as comma-delimited series of values. " />
   <parameter name="isBugsAndChoresAreEstimatable" description="When true, Tracker will allow estimates to be set on Bug- and Chore-type stories." />
   <parameter name="isAutomaticPlanning"
      description="When false, Tracker suspends the emergent planning of iterations based on the project's velocity." />
   <parameter name="isEnableTasks"
      description="When true, Tracker allows individual tasks to be created and managed within each story in the project." />
   <parameter name="startDate" description="The first day that should be in an iteration of the project." />
   <parameter name="timeZoneOlsonName" description="The time zone for the project." />
   <parameter name="timeZoneOffset" description="The time zone offset for the project." />
   <parameter name="velocityAveragedOver"
      description="The number of iterations that should be used when averaging the number of points of Done stories in order to compute the project's velocity." />
   <parameter name="numberOfDoneIterationsToShow" description="The number of done iterations to be show in the UI." />
   <parameter name="description" description="A description of the project's content." />
   <parameter name="profileContent" description="A long description of the project." />
   <parameter name="isEnableIncomingEmails"
      description="When true, the project will accept incoming email responses to Tracker notification emails and convert them to comments on the appropriate stories." />
   <parameter name="initialVelocity"
      description="The number which should be used as the project's velocity when there are not enough recent iterations with Done stories for an actual velocity to be computed." />
   <parameter name="projectType" description="The project's type should be private, public, or demo." />
   <parameter name="isPublic" description="When true, Tracker will allow any user on the web to view the content of the project." />
   <parameter name="isAtomEnabled"
      description="When true, Tracker allows people to subscribe to the Atom (RSS, XML) feed of project changes." />
   <parameter name="accountId" description="The ID number for the account which contains the project." />
   <parameter name="isFeatured"
      description="Whether or not the project will be included on Tracker's Featured Public Projects web page." />
   <sequence>
      <property name="uri.var.name" expression="$func:name" />
      <property name="uri.var.hasNoOwner" expression="$func:hasNoOwner" />
      <property name="uri.var.newAccountName" expression="$func:newAccountName" />
      <property name="uri.var.isCreateSample" expression="$func:isCreateSample" />
      <property name="uri.var.iterationLength" expression="$func:iterationLength" />
      <property name="uri.var.weekStartDay" expression="$func:weekStartDay" />
      <property name="uri.var.pointScale" expression="$func:pointScale" />
      <property name="uri.var.isBugsAndChoresAreEstimatable" expression="$func:isBugsAndChoresAreEstimatable" />
      <property name="uri.var.isAutomaticPlanning" expression="$func:isAutomaticPlanning" />
      <property name="uri.var.isEnableTasks" expression="$func:isEnableTasks" />
      <property name="uri.var.startDate" expression="$func:startDate" />
      <property name="uri.var.timeZoneOlsonName" expression="$func:timeZoneOlsonName" />
      <property name="uri.var.timeZoneOffset" expression="$func:timeZoneOffset" />
      <property name="uri.var.velocityAveragedOver" expression="$func:velocityAveragedOver" />
      <property name="uri.var.numberOfDoneIterationsToShow" expression="$func:numberOfDoneIterationsToShow" />
      <property name="uri.var.description" expression="$func:description" />
      <property name="uri.var.profileContent" expression="$func:profileContent" />
      <property name="uri.var.isEnableIncomingEmails" expression="$func:isEnableIncomingEmails" />
      <property name="uri.var.initialVelocity" expression="$func:initialVelocity" />
      <property name="uri.var.projectType" expression="$func:projectType" />
      <property name="uri.var.isPublic" expression="$func:isPublic" />
      <property name="uri.var.isAtomEnabled" expression="$func:isAtomEnabled" />
      <property name="uri.var.accountId" expression="$func:accountId" />
      <property name="uri.var.isFeatured" expression="$func:isFeatured" />
      <!-- If not empty, value is converted into INTEGER type in order to attach to payload. -->
      <filter source="boolean(get-property('uri.var.iterationLength'))" regex="true">
         <then>
            <property name="uri.var.iterationLength" expression=" get-property('uri.var.iterationLength')"
               type="INTEGER" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.velocityAveragedOver'))" regex="true">
         <then>
            <property name="uri.var.velocityAveragedOver" expression=" get-property('uri.var.velocityAveragedOver')"
               type="INTEGER" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.numberOfDoneIterationsToShow'))" regex="true">
         <then>
            <property name="uri.var.numberOfDoneIterationsToShow" expression=" get-property('uri.var.numberOfDoneIterationsToShow')"
               type="INTEGER" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.initialVelocity'))" regex="true">
         <then>
            <property name="uri.var.initialVelocity" expression=" get-property('uri.var.initialVelocity')"
               type="INTEGER" />
         </then>
      </filter>
      <filter source="boolean(get-property('uri.var.accountId'))" regex="true">
         <then>
            <property name="uri.var.accountId" expression=" get-property('uri.var.accountId')" type="INTEGER" />
         </then>
      </filter>
      <script language="js">
      <![CDATA[
         var payload = {};
         var name = mc.getProperty('uri.var.name');
         var hasNoOwner = mc.getProperty('uri.var.hasNoOwner');
         var newAccountName = mc.getProperty('uri.var.newAccountName');
         var isCreateSample = mc.getProperty('uri.var.isCreateSample');
         var iterationLength = mc.getProperty('uri.var.iterationLength');
         var weekStartDay = mc.getProperty('uri.var.weekStartDay');
         var pointScale = mc.getProperty('uri.var.pointScale');
         var isBugsAndChoresAreEstimatable = mc.getProperty('uri.var.isBugsAndChoresAreEstimatable');
         var isAutomaticPlanning = mc.getProperty('uri.var.isAutomaticPlanning');
         var isEnableTasks = mc.getProperty('uri.var.isEnableTasks');
         var startDate = mc.getProperty('uri.var.startDate');
         var timeZoneOlsonName = mc.getProperty('uri.var.timeZoneOlsonName');
         var timeZoneOffset = mc.getProperty('uri.var.timeZoneOffset');
         var velocityAveragedOver = mc.getProperty('uri.var.velocityAveragedOver');
         var numberOfDoneIterationsToShow = mc.getProperty('uri.var.numberOfDoneIterationsToShow');
         var description = mc.getProperty('uri.var.description');
         var profileContent = mc.getProperty('uri.var.profileContent');
         var isEnableIncomingEmails = mc.getProperty('uri.var.isEnableIncomingEmails');
         var initialVelocity = mc.getProperty('uri.var.initialVelocity');
         var projectType = mc.getProperty('uri.var.projectType');
         var isPublic = mc.getProperty('uri.var.isPublic');
         var isAtomEnabled = mc.getProperty('uri.var.isAtomEnabled');
         var accountId = mc.getProperty('uri.var.accountId');
         var isFeatured = mc.getProperty('uri.var.isFeatured');
         if (name != null && name != "") {
            payload.name = name;
         }
         if (newAccountName != null && newAccountName != "") {
            payload.new_account_name = newAccountName;
         }
         if(hasNoOwner !=null && hasNoOwner !=""){
            hasNoOwner = hasNoOwner.toLowerCase();
            if((hasNoOwner == 'true') || (hasNoOwner == 'false')){
               hasNoOwner = eval("(" + hasNoOwner + ")");
            }
            payload.no_owner = hasNoOwner;
         }
         if(isCreateSample !=null && isCreateSample !=""){
            isCreateSample = isCreateSample.toLowerCase();
            if((isCreateSample == 'true') || (isCreateSample == 'false')){
               isCreateSample = eval("(" + isCreateSample + ")");
            }
            payload.create_sample = isCreateSample;
         }
         if (iterationLength != null && iterationLength != "") {
            payload.iteration_length = iterationLength;
         }
         if (weekStartDay != null && weekStartDay != "") {
            payload.week_start_day = weekStartDay;
         }
         if (pointScale != null && pointScale != "") {
            payload.point_scale = pointScale;
         }
         if(isBugsAndChoresAreEstimatable !=null && isBugsAndChoresAreEstimatable !=""){
            isBugsAndChoresAreEstimatable = isBugsAndChoresAreEstimatable.toLowerCase();
            if((isBugsAndChoresAreEstimatable == 'true') || (isBugsAndChoresAreEstimatable == 'false')){
               isBugsAndChoresAreEstimatable = eval("(" + isBugsAndChoresAreEstimatable + ")");
            }
            payload.bugs_and_chores_are_estimatable = isBugsAndChoresAreEstimatable;
         }
         if(isAutomaticPlanning !=null && isAutomaticPlanning !=""){
            isAutomaticPlanning = isAutomaticPlanning.toLowerCase();
            if((isAutomaticPlanning == 'true') || (isAutomaticPlanning == 'false')){
               isAutomaticPlanning = eval("(" + isAutomaticPlanning + ")");
            }
            payload.automatic_planning = isAutomaticPlanning;
         }
         if(isEnableTasks !=null && isEnableTasks !=""){
            isEnableTasks = isEnableTasks.toLowerCase();
            if((isEnableTasks == 'true') || (isEnableTasks == 'false')){
               isEnableTasks = eval("(" + isEnableTasks + ")");
            }
            payload.enable_tasks = isEnableTasks;
         }
         if (startDate != null && startDate != "") {
            payload.start_date = startDate;
         }
         var timeZone = new Object();
         if (timeZoneOlsonName != null && timeZoneOlsonName != "") {
            timeZone.olson_name = timeZoneOlsonName;
         }
         if (timeZoneOffset != null && timeZoneOffset != "") {
            timeZone.offset = timeZoneOffset;
         }
         if(timeZone.hasOwnProperty("olson_name") || timeZone.hasOwnProperty("offset")){
            payload.time_zone = timeZone;
         }
         if (velocityAveragedOver != null && velocityAveragedOver != "") {
            payload.velocity_averaged_over = velocityAveragedOver;
         }
         if (numberOfDoneIterationsToShow != null && numberOfDoneIterationsToShow != "") {
            payload.number_of_done_iterations_to_show = numberOfDoneIterationsToShow;
         }
         if (description != null && description != "") {
            payload.description = description;
         }
         if (profileContent != null && profileContent != "") {
            payload.profile_content = profileContent;
         }
         if(isEnableIncomingEmails !=null && isEnableIncomingEmails !=""){
            isEnableIncomingEmails = isEnableIncomingEmails.toLowerCase();
            if((isEnableIncomingEmails == 'true') || (isEnableIncomingEmails == 'false')){
               isEnableIncomingEmails = eval("(" + isEnableIncomingEmails + ")");
            }
            payload.enable_incoming_emails = isEnableIncomingEmails;
         }
         if (initialVelocity != null && initialVelocity != "") {
            payload.initial_velocity = initialVelocity;
         }
         if (projectType != null && projectType != "") {
            payload.project_type = projectType;
         }
         if(isPublic !=null && isPublic !=""){
            isPublic = isPublic.toLowerCase();
            if((isPublic == 'true') || (isPublic == 'false')){
               isPublic = eval("(" + isPublic + ")");
            }
            payload['public'] = isPublic;
         }
         if(isAtomEnabled !=null && isAtomEnabled !=""){
            isAtomEnabled = isAtomEnabled.toLowerCase();
            if((isAtomEnabled == 'true') || (isAtomEnabled == 'false')){
               isAtomEnabled = eval("(" + isAtomEnabled + ")");
            }
            payload.atom_enabled = isAtomEnabled;
         }
         if (accountId != null && accountId != "") {
            payload.account_id = accountId;
         }
         if(isFeatured !=null && isFeatured !=""){
            isFeatured = isFeatured.toLowerCase();
            if((isFeatured == 'true') || (isFeatured == 'false')){
               isFeatured = eval("(" + isFeatured + ")");
            }
            payload.featured = isFeatured;
         }
         mc.setPayloadJSON(payload);
      ]]>
      </script>
      <call>
         <endpoint>
            <http method="post" uri-template="{uri.var.apiUrl}/projects" />
         </endpoint>
      </call>
      <!-- Remove custom Headers from the API Response -->
      <header name="X-UA-Compatible" action="remove" scope="transport" />
      <header name="Cache-Control" action="remove" scope="transport" />
      <header name="X-Request-Id" action="remove" scope="transport" />
      <header name="X-Runtime" action="remove" scope="transport" />
      <header name="ETag" action="remove" scope="transport" />
      <header name="X-Rack-Cache" action="remove" scope="transport" />
      <header name="X-Powered-By" action="remove" scope="transport" />
      <header name="Access-Control-Allow-Origin" action="remove" scope="transport" />
      <header name="Access-Control-Allow-Credentials" action="remove" scope="transport" />
      <header name="Access-Control-Allow-Methods" action="remove" scope="transport" />
      <header name="Access-Control-Allow-Headers" action="remove" scope="transport" />
      <header name="X-Tracker-Client-Pinger-Interval" action="remove" scope="transport" />
      <header name="X-Tracker-Project-Version" action="remove" scope="transport" />
   </sequence>
</template>